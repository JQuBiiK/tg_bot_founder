import aiosqlite  # –ü–æ–¥–∫–ª—é—á–∞–µ–º aiosqlite –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from aiogram import types
from aiogram.filters.command import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from db import update_quiz_index, get_quiz_index, save_user_answer, update_user_statistics, get_top_users, reset_user_progress
from config import logging
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ JSON-—Ñ–∞–π–ª–∞
with open('questions.json', 'r', encoding='utf-8') as file:
    quiz_data = json.load(file)

def setup_handlers(dp):
    dp.message(Command("start"))(cmd_start)
    dp.message(Command("quiz"))(cmd_quiz)
    dp.message(Command("stats"))(cmd_stats)
    dp.message()(handle_answer)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–≤–∏–∑–∞ –ø–æ Python. –í–≤–µ–¥–∏—Ç–µ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /quiz
async def cmd_quiz(message: types.Message):
    user_id = message.from_user.id
    await reset_user_progress(user_id)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –∫–≤–∏–∑–∞
    await update_quiz_index(user_id, 0)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ 0
    await start_quiz(user_id, message)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /stats
async def cmd_stats(message: types.Message):
    top_users = await get_top_users()
    if not top_users:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ. –ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ä–µ–π—Ç–∏–Ω–≥.")
        return

    stats_text = "üèÜ –¢–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–≤–∏–∑–∞:\n\n"
    for i, (user_id, best_score, attempts) in enumerate(top_users, start=1):
        stats_text += f"{i}. –£—á–∞—Å—Ç–Ω–∏–∫ {user_id}: –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç {best_score}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ {attempts} üß†\n"
    
    await message.answer(stats_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫–≤–∏–∑–∞
async def start_quiz(user_id, message):
    question_index = await get_quiz_index(user_id)

    if question_index >= len(quiz_data):
        await send_final_results(user_id, message)
        return

    question_data = quiz_data[question_index]
    question_text = question_data['question']
    options = question_data['options']

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=option)] for option in options],
        resize_keyboard=True
    )

    await message.answer(question_text, reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_answer(message: types.Message):
    user_id = message.from_user.id
    user_answer = message.text
    question_index = await get_quiz_index(user_id)
    
    if question_index >= len(quiz_data):
        await message.answer("–ö–≤–∏–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    question_data = quiz_data[question_index]
    correct_option = question_data['correct_option']
    correct_answer = question_data['options'][correct_option]
    is_correct = int(user_answer == correct_answer)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await save_user_answer(user_id, question_index, user_answer, correct_answer, is_correct)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
    if is_correct:
        feedback = f"–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer} ‚úÖ"
    else:
        feedback = f"–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer} ‚ùå\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await message.answer(feedback, reply_markup=ReplyKeyboardRemove())
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
    await update_quiz_index(user_id, question_index + 1)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑
    await start_quiz(user_id, message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def send_final_results(user_id, message):
    async with aiosqlite.connect('quiz_bot.db') as db:
        async with db.execute('SELECT COUNT(*) FROM user_answers WHERE user_id = ? AND is_correct = 1', (user_id,)) as cursor:
            correct_answers = (await cursor.fetchone())[0]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥
    is_new_record, best_score = await update_user_statistics(user_id, correct_answers)
    
    if is_new_record:
        result_message = f"–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {correct_answers} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. üéâ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–≤–µ–¥–∏—Ç–µ /stats"
    else:
        result_message = f"–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {correct_answers} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n–í–∞—à –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_score}.\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–≤–µ–¥–∏—Ç–µ /stats"

    await message.answer(result_message)
